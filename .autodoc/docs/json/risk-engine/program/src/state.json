{
  "fileName": "state.rs",
  "filePath": "risk-engine/program/src/state.rs",
  "url": "https://github.com/convergence-rfq/convergence-program-library/risk-engine/program/src/state.rs",
  "summary": "The `Config` struct and its associated methods define the global configuration for the Convergence Program Library. It contains various parameters that are used throughout the library to determine how certain operations should be performed. \n\nThe `Config` struct contains several fields, including `collateral_for_variable_size_rfq_creation`, `collateral_for_fixed_quote_amount_rfq_creation`, `collateral_mint_decimals`, `safety_price_shift_factor`, `overall_safety_factor`, `accepted_oracle_staleness`, `accepted_oracle_confidence_interval_portion`, `risk_categories_info`, and `instrument_types`. \n\nThe `RiskCategoryInfo` struct contains information about the risk associated with a particular category of financial instrument. It includes fields for `interest_rate`, `annualized_30_day_volatility`, and `scenario_per_settlement_period`. The `InstrumentInfo` struct contains information about a particular financial instrument, including its `program`, `type`, and `padding`. \n\nThe `Scenario` struct represents a particular scenario that may occur during a settlement period. It includes fields for `base_asset_price_change` and `volatility_change`. The `OptionCommonData` struct contains common data for an option, including its `option_type`, `underlying_amount_per_contract`, `underlying_amound_per_contract_decimals`, `strike_price`, `strike_price_decimals`, and `expiration_timestamp`. The `FutureCommonData` struct contains common data for a future, including its `underlying_amount_per_contract` and `underlying_amound_per_contract_decimals`.\n\nThe `Config` struct has several methods associated with it. The `get_allocated_size` method returns the size of the `Config` struct in memory. The `get_risk_info` method returns the `RiskCategoryInfo` for a given `RiskCategory`. The `get_instrument_types_map` method returns a `HashMap` that maps `Pubkey`s to `InstrumentType`s.\n\nOverall, the `Config` struct and its associated methods provide a way to configure and manage the various financial instruments and risk categories used in the Convergence Program Library. By defining these parameters in a central location, the library can ensure that all operations are performed consistently and according to the desired specifications.",
  "questions": "1. What is the purpose of the `Config` struct and what are its fields used for?\n- The `Config` struct is used to store various configuration parameters for the program, such as collateral requirements and risk category information. Its fields are used to represent these parameters, such as `collateral_for_variable_size_rfq_creation` and `risk_categories_info`.\n\n2. What is the purpose of the `RiskCategoryInfo` struct and how is it used?\n- The `RiskCategoryInfo` struct is used to store information about a particular risk category, such as its interest rate and volatility. It also contains an array of `Scenario` structs that represent different scenarios for the risk category over different settlement periods. It is used to calculate the base scenario for a given settlement period using the `get_base_scenario` method.\n\n3. What is the purpose of the `InstrumentType` enum and how is it used?\n- The `InstrumentType` enum is used to represent different types of financial instruments, such as spot, option, and future contracts. It is used in the `InstrumentInfo` struct to store information about a particular instrument, such as its program ID and type. It is also used in other parts of the program to differentiate between different types of instruments."
}